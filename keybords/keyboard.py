import logging
from enum import Enum

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class CallbackData(str, Enum):
    """–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ –¥–ª—è callback_data, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö."""
    RANDOM = "random"
    START = "start"
    BREAK = "break"
    TALK_PREFIX = "talk_"
    QUIZ_PREFIX = "quiz_"
    QUIZ_MORE = "quiz_more"
    CHANGE_TOPIC = "change_topic"
    END_QUIZ = "end_quiz"
    END_TALK = "end_talk"
    END_TRANS = "end_trans"
    END_VOICE = "end_voice"
    LANG_PREFIX = "lang_"
    CHANGE_LANG = "change_lang"
    MAIN_MENU = "main_menu"

class Keyboards:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è inline –∏ reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram-–±–æ—Ç–∞.

    –í—Å–µ –º–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç –≥–æ—Ç–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.
    """

    # –¢–µ–∫—Å—Ç—ã –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    BUTTON_TEXTS = {
        "random_more": "üîÅ –•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç",
        "exit": "üè† –ó–∞–∫–æ–Ω—á–∏—Ç—å",
        "quiz_more": "üîÑ –ï—â—ë –≤–æ–ø—Ä–æ—Å",
        "change_topic": "üîÄ –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É",
        "change_lang": "üîÄ –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫",
    }

    @staticmethod
    def _get_exit_button(callback_data: str = CallbackData.MAIN_MENU) -> InlineKeyboardButton:
        """–°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É '–ó–∞–∫–æ–Ω—á–∏—Ç—å' —Å –∑–∞–¥–∞–Ω–Ω—ã–º callback_data."""
        return InlineKeyboardButton(
            text=Keyboards.BUTTON_TEXTS["exit"],
            callback_data=callback_data
        )

    @staticmethod
    def main_menu(columns: int = 2) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

        Args:
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2).

        Returns:
            ReplyKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞.
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
        builder = ReplyKeyboardBuilder()
        buttons = [
            "üé≤ /random - –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç",
            "ü§ñ /gpt - ChatGPT –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
            "üë§ /talk - –î–∏–∞–ª–æ–≥ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é",
            "üß© /quiz - –ö–≤–∏–∑",
            "üåê /translate - –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫",
            "üéôÔ∏è /voice - –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
        ]
        for text in buttons:
            builder.button(text=text)
        builder.adjust(columns)
        return builder.as_markup(resize_keyboard=True)

    @staticmethod
    def get_random_fact_keyboard() -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–∂–∏–º–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤.

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ï—â—ë —Ñ–∞–∫—Ç" –∏ "–ó–∞–∫–æ–Ω—á–∏—Ç—å".
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤")
        builder = InlineKeyboardBuilder()
        builder.button(
            text=Keyboards.BUTTON_TEXTS["random_more"],
            callback_data=CallbackData.RANDOM
        )
        builder.add(Keyboards._get_exit_button())
        return builder.as_markup()

    @staticmethod
    def get_gpt_exit_keyboard() -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ GPT.

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å".
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ GPT")
        builder = InlineKeyboardBuilder()
        builder.add(Keyboards._get_exit_button(CallbackData.BREAK))
        return builder.as_markup()

    @staticmethod
    def get_personalities_keyboard(columns: int = 1) -> InlineKeyboardMarkup | None:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ª–∏—á–Ω–æ—Å—Ç–µ–π –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.

        Args:
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ª–∏—á–Ω–æ—Å—Ç–µ–π, –∏–ª–∏ None, –µ—Å–ª–∏ –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.

        Notes:
            –ï—Å–ª–∏ Config.PERSONS –ø—É—Å—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None.
        """
        if not Config.PERSONS:
            logger.warning("Config.PERSONS –ø—É—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return None

        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–µ–π")
        builder = InlineKeyboardBuilder()
        for person_id, person_name in Config.PERSONS.items():
            callback_data = f"{CallbackData.TALK_PREFIX.value}{person_id.value}"
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ª–∏—á–Ω–æ—Å—Ç–∏: —Ç–µ–∫—Å—Ç={person_name.upper()}, callback_data={callback_data}")
            builder.button(
                text=person_name.upper(),
                callback_data=callback_data
            )
        builder.adjust(columns)
        return builder.as_markup()

    @staticmethod
    def get_talk_exit_keyboard() -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞.

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ó–∞–∫–æ–Ω—á–∏—Ç—å".
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞")
        builder = InlineKeyboardBuilder()
        builder.add(Keyboards._get_exit_button(CallbackData.END_TALK))
        return builder.as_markup()

    @staticmethod
    def get_quiz_topics_keyboard(columns: int = 1) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ç–µ–º –¥–ª—è –∫–≤–∏–∑–∞.

        Args:
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º.
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Ç–µ–º –∫–≤–∏–∑–∞")
        builder = InlineKeyboardBuilder()
        topics = [
            ("üêç –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (Python)", f"{CallbackData.QUIZ_PREFIX.value}prog"),
            ("‚à´ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", f"{CallbackData.QUIZ_PREFIX.value}math"),
            ("üß¨ –ë–∏–æ–ª–æ–≥–∏—è", f"{CallbackData.QUIZ_PREFIX.value}biology"),
        ]
        for text, callback_data in topics:
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞: —Ç–µ–∫—Å—Ç={text}, callback_data={callback_data}")
            builder.button(text=text, callback_data=callback_data)
        builder.adjust(columns)
        return builder.as_markup()

    @staticmethod
    def get_quiz_control_keyboard(columns: int = 1) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞.

        Args:
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º.
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–≤–∏–∑–æ–º")
        builder = InlineKeyboardBuilder()
        builder.button(
            text=Keyboards.BUTTON_TEXTS["quiz_more"],
            callback_data=CallbackData.QUIZ_MORE
        )
        builder.button(
            text=Keyboards.BUTTON_TEXTS["change_topic"],
            callback_data=CallbackData.CHANGE_TOPIC
        )
        builder.add(Keyboards._get_exit_button(CallbackData.END_QUIZ))
        builder.adjust(columns)
        return builder.as_markup()

    @staticmethod
    def get_languages_keyboard(columns: int = 2) -> InlineKeyboardMarkup | None:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —è–∑—ã–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.

        Args:
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2).

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —è–∑—ã–∫–æ–≤, –∏–ª–∏ None, –µ—Å–ª–∏ —è–∑—ã–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.

        Notes:
            –ï—Å–ª–∏ Config.LANGUAGES –ø—É—Å—Ç, –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è None.
        """
        if not Config.LANGUAGES:
            logger.warning("Config.LANGUAGES –ø—É—Å—Ç, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —è–∑—ã–∫–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
            return None

        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–æ–≤")
        builder = InlineKeyboardBuilder()
        for lang_name, lang_code in Config.LANGUAGES.items():
            builder.button(
                text=lang_name,
                callback_data=f"{CallbackData.LANG_PREFIX.value}{lang_code}"
            )
        builder.adjust(columns)
        return builder.as_markup()

    @staticmethod
    def get_translator_control_keyboard(columns: int = 1) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º.

        Args:
            columns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).

        Returns:
            InlineKeyboardBuilder: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        logger.debug("–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º")
        builder = InlineKeyboardBuilder()
        builder.button(
            text=Keyboards.BUTTON_TEXTS["change_lang"],
            callback_data=CallbackData.CHANGE_LANG.value
        )
        builder.add(Keyboards._get_exit_button(CallbackData.END_TRANS))
        builder.adjust(columns)
        return builder.as_markup()

    @staticmethod
    def get_voice_control_keyboard() -> InlineKeyboardMarkup:
        builder = InlineKeyboardBuilder()
        builder.button(
            text="–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
            callback_data="retry_voice"
        )
        builder.add(Keyboards._get_exit_button(CallbackData.END_VOICE.value))
        builder.adjust(2)
        return builder.as_markup()